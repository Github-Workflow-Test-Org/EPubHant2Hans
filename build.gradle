import java.util.regex.Matcher

plugins {
    id 'java'
    id 'application'
    id "org.beryx.jlink" version "2.16.2"
}

group 'razesoldier'
version '1.0-SNAPSHOT'

sourceCompatibility = 12
targetCompatibility = 12

repositories {
    mavenCentral()
}

dependencies {
    implementation("com.mayabot.mynlp:mynlp-transform:3.0.2")
    implementation("org.jsoup:jsoup:1.12.1")
    implementation("org.jetbrains:annotations:17.0.0")
    testImplementation("org.slf4j:slf4j-nop:1.7.28")
    testImplementation("org.junit.jupiter:junit-jupiter:5.5.2")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher:1.5.2")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.5.2")
}

ext.moduleName = 'razesoldier.epub'
mainClassName = "$moduleName/razesoldier.epub.cli.CliEntry"

task copyTestResource(type: Copy) {
    from "$buildDir/resources/test"
    into "$buildDir/classes/java/test"
    mustRunAfter processTestResources
}

compileJava {
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
            '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}

compileTestJava {
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
            '--module-path', classpath.asPath,
            '--add-modules', 'org.junit.jupiter',
            '--add-reads', "$moduleName=org.junit.jupiter",
            '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
        ]
        classpath = files()
    }
}

test {
    dependsOn copyTestResource
    useJUnitPlatform()
    inputs.property("moduleName", moduleName)
    doFirst {
        jvmArgs = [
            '--module-path', classpath.asPath,
            '--add-modules', 'ALL-MODULE-PATH',
            '--add-reads', "$moduleName=org.junit.jupiter,org.junit.jupiter.api,org.junit.jupiter.params",
            '--add-opens', "razesoldier.epub/razesoldier.epub.reader=org.junit.platform.commons",
            '--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir).asPath,
        ]
        classpath = files()
    }
}

run {
    inputs.property("moduleName", moduleName)
    doFirst {
        jvmArgs = [
            '--module-path', classpath.asPath,
            '--module', mainClassName
        ]
        classpath = files()
    }
}


startScripts {
    inputs.property("moduleName", moduleName)
    doFirst {
        classpath = files()
        defaultJvmOpts = [
            '-Dfile.encoding=UTF-8',
            '--module-path', 'APP_HOME_LIBS',
            '--module', mainClassName
        ]
    }
    doLast{
        def bashFile = new File(outputDir, applicationName)
        String bashContent = bashFile.text
        bashFile.text = bashContent.replaceFirst('APP_HOME_LIBS', Matcher.quoteReplacement('$APP_HOME/lib'))

        def batFile = new File(outputDir, applicationName + ".bat")
        String batContent = batFile.text
        batFile.text = batContent.replaceFirst('APP_HOME_LIBS', Matcher.quoteReplacement('%APP_HOME%\\lib'))
    }
}

afterEvaluate {
    jar {
        inputs.property("moduleName", moduleName)
        manifest {
            attributes('Automatic-Module-Name': moduleName)
            attributes 'Implementation-Title': "EPubHant2Hans",
                    'Main-Class': 'razesoldier.epub.cli.CliEntry'
        }
    }
}


jlink {
    launcher {
        name = 'epubconverter'
        jvmArgs = ['-Dfile.encoding=UTF-8']
    }
    imageName.set("epubconverter-image")
    addOptions("--bind-services")
}

tasks.jlink.doLast {
    copy {
        from('src/main/resources')
        into("$buildDir/image/bin")
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}
